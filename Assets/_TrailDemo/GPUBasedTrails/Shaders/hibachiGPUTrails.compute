#pragma kernel CalcInput

#include "GPUTrails.cginc"

float _Time;
float _UpdateDistanceMin;
uint _TrailNum;

RWStructuredBuffer<Trail> _TrailBuffer;
RWStructuredBuffer<Node> _NodeBuffer;

Node GetNode(int trailIdx, int nodeIdx)
{
	return _NodeBuffer[ToNodeBufIdx(trailIdx, nodeIdx)];
}

void SetNode(Node node, int trailIdx, int nodeIdx)
{
	_NodeBuffer[ToNodeBufIdx(trailIdx, nodeIdx)] = node;
}

////////////////////////////////////////////////////////////////////////////////
// Input
////////////////////////////////////////////////////////////////////////////////
struct BoidData
{
	float3 velocity; // 速度
	float3 position; // 位置
	float3 target;   // 目標位置
	// float3 textTarget;
	// float2 uv1;
	float2 uv2;
	// float2 uv3;
	float4 color1;
	float4 color2;
	float size;
	// int pagingButton;
	float indivTargetWight;
	float indivTurblulanceWight;
	float indivGravityWight;
	float indivBoidsPileWight;
	float lifeTime;
	int mode;
};
StructuredBuffer<BoidData> _InputBuffer;

[numthreads(256,1,1)]
void CalcInput (uint3 id : SV_DispatchThreadID)
{
	uint trailIdx = id.x;
	if ( trailIdx < _TrailNum)
	{	
		Trail trail = _TrailBuffer[trailIdx];
		// Input input = _InputBuffer[trailIdx];
		float3 position =  _InputBuffer[trailIdx].position;
		int currentNodeIdx = trail.currentNodeIdx;

		bool update = true;
		if ( trail.currentNodeIdx >= 0 )
		{
			Node node = GetNode(trailIdx, currentNodeIdx);
			float dist = distance(position, node.position);
			update = dist > _UpdateDistanceMin;
		}

		if ( update )
		{
			Node node;
			node.time = _Time;
			if(_InputBuffer[trailIdx].lifeTime < 0 || _InputBuffer[trailIdx].mode == 0){
				node.time = -1;
			}
			// node.time = _InputBuffer[trailIdx].lifeTime;
			node.position = position;

			currentNodeIdx++;
			currentNodeIdx %= _NodeNumPerTrail;

			// write new node
			SetNode(node, trailIdx, currentNodeIdx);

			// update trail
			trail.currentNodeIdx = currentNodeIdx;
			_TrailBuffer[trailIdx] = trail;
		}
	}
}
